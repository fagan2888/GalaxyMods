#!/usr/bin/env lsd

SERVICE_URL = "http://ucrel-api.lancaster.ac.uk/cgi-bin/gost.pl"
BOUNDARY = UUID.randomUUID().toString()

void write(PrintStream out, String name, String value) {
    out.print('--')
    out.println(BOUNDARY)
    out.println('Content-Disposition: form-data; name="' + name + '"')
    out.println()
    out.println(value)
}

Map post(String text) {
    HttpURLConnection connection = (HttpURLConnection) new URL(SERVICE_URL).openConnection()

    connection.setDoOutput(true); // Triggers POST.
    connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=$BOUNDARY");

    OutputStream output = connection.getOutputStream();
    PrintStream stream = new PrintStream(output)
    try {
        //parts.each { key,value -> write(stream, key, value)}
        write(stream, 'type', 'rest')
        write(stream, 'email', 'services@lappsgrid.org')
        write(stream, 'tagset', 'c7')
        write(stream, 'style', 'vert')
        write(stream, 'text', text)
        stream.println('--' + BOUNDARY + '--')
    } finally {
        //println "Closing output stream."
        try { stream.close(); } catch (IOException ignored) {  }
    }

    Map response = new HashMap()
    if (connection.headerFields.size() > 0) {
        response.headers = new HashMap()
        connection.headerFields.each { name,value ->
            if (name) {
                response.headers[name] = value
            }
        }
    }

    // Read the response from the connection.
    response.status = connection.responseCode
    response.encoding = connection.contentEncoding
    response.contentType = connection.contentType
    response.message = connection.responseMessage
    if (response.status == 200) {
        response.body = connection.inputStream.text
    }
    else {
        response.body = connection.inputStream.text
    }
    return response
}

File input = new File(args[0])
File output = new File(args[1])

Data data = Serializer.parse(input.text)
Container container
String text
if (Uri.TEXT == data.discriminator) {
    text = data.payload.toString()
    container = new Container()
    container.text = text
}
else if (Uri.LIF == data.discriminator) {
    container = new Container((Map)data.payload)
    text = container.text
}

Map response = post(text)
if (response.status != 200) {
    output.text = new Data(Uri.ERROR, response.body).asJson()
    return
}

int WAITING = 1
int PROCESSING = 2

View view = container.newView()
view.addContains(Uri.TOKEN, 'GOST', "token")
view.addContains(Uri.POS, 'GOST', "pos")
view.addContains(Uri.LEMMA, 'GOST', 'lemma')
view.addContains(Uri.TOKEN + "#semtag", 'GOST', "Semantic tag")

View neView = null

int state = WAITING
int count = 0
int index = 0
int nerid = 0

response.body.eachLine { String line ->
    if (state == WAITING) {
        if (line.startsWith('S_BEGIN')) {
            state = PROCESSING
        }
    }
    else if (state == PROCESSING) {
        if (line.startsWith('S_END')) {
            state = WAITING
        }
        else {
            Annotation a = view.newAnnotation()
            a.atType = Uri.TOKEN
            a.id = "gost-${++count}"
            String[] parts = line.split('\t')
            String word = parts[0]
            a.features['word'] = word
            a.features['lemma'] = parts[1]
            a.features['pos'] = parts[2]
            // Save the list of tags for processing below.
            List<String> tags = parts[3].tokenize()
            a.features['semtag'] = tags
            a.features['mwe'] = parts[4]
            //a.features['tags'] = makeTags(parts[5])

            a.start = text.indexOf(word, index)
            a.end = a.start + word.length()
            index = a.end

            // Now check if we have any GO annotations
            Annotation ne = null
            tags.each { tag ->
                if (tag.startsWith('GO:')) {
                    if (ne == null) {
                        if (neView == null) {
                            neView = container.newView()
                            neView.addContains(Uri.NE, 'GOST', 'gene')
                        }
                        ne = neView.newAnnotation()
                        ne.id = "goner-${nerid++}"
                        ne.start = a.start
                        ne.end = a.end
                        ne.atType = Uri.NE
                        ne.features.category = 'GENE'
                        ne.features.ontologyIds = []
                        ne.features.targets = [ "${view.id}:${a.id}".toString() ]
                    }
                    ne.features.ontologyIds << tag
                }
            }
        }
    }
}

output.text = new Data(Uri.LIF, container).asPrettyJson()

List makeTags(String input) {
    return input.tokenize(';').collect { makeTag(it.trim()) }
}

Map makeTag(String input) {

    int space = input.indexOf(' ')
    Map map = [:]
    if (space > 0) {
        map.tag = input.substring(0, space)
        map.labels = input.substring(space + 1)[1..-2].tokenize(',').collect { it.trim() }
    }
    return map
}
